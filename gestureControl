import cv2
import mediapipe as mp
import pyautogui

# Initialize MediaPipe Hand module
mp_hands = mp.solutions.hands
hands = mp_hands.Hands(max_num_hands=1)
mp_draw = mp.solutions.drawing_utils

# OpenCV camera
cap = cv2.VideoCapture(0)

def fingers_up(hand_landmarks):
    tips_ids = [4, 8, 12, 16, 20]  # Thumb, Index, Middle, Ring, Pinky
    fingers = []

    # Thumb
    if hand_landmarks.landmark[tips_ids[0]].x < hand_landmarks.landmark[tips_ids[0] - 1].x:
        fingers.append(1)
    else:
        fingers.append(0)

    # Other fingers
    for id in range(1, 5):
        if hand_landmarks.landmark[tips_ids[id]].y < hand_landmarks.landmark[tips_ids[id] - 2].y:
            fingers.append(1)
        else:
            fingers.append(0)
    return fingers

while True:
    success, img = cap.read()
    img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

    results = hands.process(img_rgb)
    if results.multi_hand_landmarks:
        for hand_landmarks in results.multi_hand_landmarks:
            mp_draw.draw_landmarks(img, hand_landmarks, mp_hands.HAND_CONNECTIONS)

            finger_status = fingers_up(hand_landmarks)

            # Custom Gesture Conditions:
            # Only Index finger up = Accelerate
            if finger_status == [0,1,0,0,0]:
                pyautogui.keyDown('right')
                pyautogui.keyUp('left')
                cv2.putText(img, "Accelerate", (10,70), cv2.FONT_HERSHEY_SIMPLEX, 1, (0,255,0), 3)

            # Only Thumb up = Brake
            elif finger_status == [1,0,0,0,0]:
                pyautogui.keyDown('left')
                pyautogui.keyUp('right')
                cv2.putText(img, "Brake", (10,70), cv2.FONT_HERSHEY_SIMPLEX, 1, (0,0,255), 3)

            else:
                pyautogui.keyUp('right')
                pyautogui.keyUp('left')

    cv2.imshow("Hill Climb Hand Control", img)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
